use std:list:vec [Vec]

// A vector-backed X,Y matrix implementation
type Matrix a {
  lines Vec (Vec a)
}

fn fromLines lines as Vec (Vec a) -> Matrix a = { lines }

fn fromSize width height default_ as uint, uint, a -> Matrix a = 
  { lines =
    vec:from_range
      (0, height)
      #(\_ -> vec:from_range (0, width) #(\_ -> default_))
  }

// Get a point of the matrix. Negative coordinates always return Nothing
fn gets (x, y) m as (int, int), Matrix a -> Maybe a =
  if y < 0 || x < 0
    then Nothing
    else get (x as uint, y as uint) m

fn get (x, y) {lines} as (uint, uint), Matrix a -> Maybe a =
  lines
  . get (y as uint)
  . and #(\line -> line . get (x as uint))

fn set (x, y) v {lines} as (uint, uint), a, Matrix a -> () = 
  match lines . get (y as uint)
  | Just line -> vec:unsafe_set x v line
  | Nothing -> io:crash ("out of bounds: " <> (x, y))

when a can Compare
fn contains_line to_find m as [a], Matrix a -> bool = 
  let flen = to_find . len in
  m.lines
  . to_slice
  . any #(\line -> check_line (line . to_slice . to_list))
 where
  fn check_line line as [a] -> bool = 
    let (of_same_len, rest) = line . split_at flen in
      match of_same_len
      | [] -> false
      | [x : xs] -> 
        (of_same_len == to_find)
        || check_line (xs ++ rest)

fn ^ (x, y) (x_, y_) as (int, int), (int, int) -> (int, int) =
  (x + x_, y + y_)

// Get points by applying a coordinate N amount of times with an offset
fn line c (ox, oy, n) default_ m
  as (int, int), (int, int, uint), a, Matrix a -> [a] =
  next c 0
 where
  fn next (x, y) i as (int, int), uint -> [a] = 
    if i == n then
      []
    else 
      gets (x, y) m . or #(\ -> default_)
      : next (x + ox, y + oy) (i+1)

fn fold f acc {lines} as fn(o, (int, int), a -> o), o, Matrix a -> o = 
  next (0, 0) acc
 where
  fn next (x, y) acc = 
    match lines . get (y as uint)
    | Nothing   -> acc
    | Just line_ -> 
      match line_ . get (x as uint)
      | Nothing    -> next (0, y + 1) acc
      | Just point -> next (x + 1, y) (f acc (x, y) point) 

fn for_each f {lines} as fn((int, int), a -> ()), Matrix a -> () =
  next (0, 0)
 where
  fn next (x, y) = 
    match lines . get (y as uint)
    | Nothing   -> ()
    | Just line_ -> 
      match line_ . get (x as uint)
      | Nothing    -> next (0, y + 1) 
      | Just point -> do f (x, y) point then next (x + 1, y)

fn find f m as fn(a -> bool), Matrix a -> [(uint, uint, a)] = 
  seek 0 0
 where
  fn seek x y = 
    match m . get (x, y)
    | Nothing -> 
      if x == 0
        then []
        else seek 0 (y + 1)
    | Just c -> 
      if f c
        then (x, y, c) : seek (x + 1) y
        else seek (x + 1) y

pub fn adjecent (x, y) m as (int, int), Matrix a -> [Maybe (uint, uint, a)] =
  adjecentc (x, y)
  . map #(\(x, y) -> gets (x, y) m . map #(\c -> (x as uint, y as uint, c)))

pub fn adjecentc (x, y) as (int, int) -> [(int, int)] =
  [(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)]

pub fn clone {lines} as Matrix a -> Matrix a = 
  { lines = lines . map #(\line -> vec:clone line) }

pub fn map f {lines} as fn((uint, uint), a -> b), Matrix a -> Matrix b = 
  { lines = lines . to_slice . imap #(\y line -> line . to_slice . imap #(\x v -> f (x, y) v)) }

impl ToString for Matrix u8
  fn show m as self -> string =
    m.lines
    . to_slice
    . to_list
    . fold #(\acc line -> acc <> "\n" <> std:string:fromByteVec line) ""

impl ToString for Matrix u16
  fn show m as self -> string =
    m.lines
    . to_slice
    . to_list
    . fold #(\acc line -> acc <> "\n" <> list:fold #<> "" (line . to_slice . to_list)) ""
