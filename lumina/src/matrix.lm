use std:list:vec [Vec]

// A vector-backed X,Y matrix implementation
type Matrix a {
  lines Vec (Vec a)
}

fn fromLines lines as Vec (Vec a) -> Matrix a = { lines }

// Get a point of the matrix. Negative coordinates always return Nothing
fn gets (x, y) m as (int, int), Matrix a -> Maybe a =
  if y < 0 || x < 0
    then Nothing
    else get (x as uint, y as uint) m

fn get (x, y) {lines} as (uint, uint), Matrix a -> Maybe a =
  lines
  . get (y as uint)
  . and #(\line -> line . get (x as uint))

fn ^ (x, y) (x_, y_) as (int, int), (int, int) -> (int, int) =
  (x + x_, y + y_)

// Get points by applying a coordinate N amount of times with an offset
fn line c (ox, oy, n) default_ m
  as (int, int), (int, int, uint), a, Matrix a -> [a] =
  next c 0
 where
  fn next (x, y) i as (int, int), uint -> [a] = 
    if i == n then
      []
    else 
      gets (x, y) m . or #(\ -> default_)
      : next (x + ox, y + oy) (i+1)

fn fold f acc {lines} as fn(o, (int, int), a -> o), o, Matrix a -> o = 
  next (0, 0) acc
 where
  fn next (x, y) acc = 
    match lines . get (y as uint)
    | Nothing   -> acc
    | Just line_ -> 
      match line_ . get (x as uint)
      | Nothing    -> next (0, y + 1) acc
      | Just point -> next (x + 1, y) (f acc (x, y) point) 

fn find f m as fn(a -> bool), Matrix a -> Maybe (uint, uint, a) = 
  seek 0 0
 where
  fn seek x y = 
    match m . get (x, y)
    | Nothing -> 
      if x == 0
        then Nothing
        else seek 0 (y + 1)
    | Just c -> 
      if f c
        then Just (x, y, c)
        else seek (x + 1) y

